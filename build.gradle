plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id("org.sonarqube") version "3.4.0.2513"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'junit:junit:4.13.1'
	implementation'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation("com.google.guava:guava:31.1-jre")
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	compileOnly'org.projectlombok:lombok:1.18.26'
	annotationProcessor'org.projectlombok:lombok:1.18.26'
	testCompileOnly'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor'org.projectlombok:lombok:1.18.26'
	testImplementation'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'com.h2database', name: 'h2', version: '1.3.148'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'

	runtimeOnly'com.mysql:mysql-connector-j'

}
jacocoTestReport{
	reports{
		html.enabled(true)
		xml.enabled(true)
		csv.enabled(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/example/demo/model",
					"com/example/demo/controller/dto",
					"com/example/demo/DemoApplication.class"
			])
		}))
	}
}
test.finalizedBy(jacocoTestReport)
tasks.named('test') {
	useJUnitPlatform()
}
sonarqube {

	properties {
		property("sonar.projectKey","Guarderia-Canina")
		property("sonar.projectName", "Guarderia-Canina - copia")
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.token", "sqp_cb753400a6d73e80c6a39d1eb7a2a53d35a9e966")

	}

}
